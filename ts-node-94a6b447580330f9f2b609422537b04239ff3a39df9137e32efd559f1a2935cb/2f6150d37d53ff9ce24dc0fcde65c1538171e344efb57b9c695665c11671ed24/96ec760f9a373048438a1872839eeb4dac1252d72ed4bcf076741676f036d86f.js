"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const express = require("express");
const cors = require("cors");
const cookieParser = require("cookie-parser");
const bodyParser = require("body-parser");
const serveStatic = require("serve-static");
const mailer_1 = require("../email/mailer");
const utils_1 = require("../router/misc/utils");
const api_1 = require("../router/api");
const { NODE_ENV, SERVER_PORT } = process.env;
const corsOptions = {
    origin: (origin, cb) => {
        // console.log(origin);
        // If origin is null or peergenius.io, it's good.
        if (!origin || origin === 'https://peergenius.io') {
            cb(null, true);
        }
        else if (NODE_ENV === 'dev') {
            cb(null, true);
        }
        else {
            cb(`Request blocked by CORS.`);
        }
    },
    allowedHeaders: ['Origin', 'X-Requested-With', 'Content-Type', 'Accept'],
    credentials: true
};
const app = express();
mailer_1.initMailer();
// Logger
app.use(utils_1.logger);
// CORS
app.options('*', cors(corsOptions));
app.use(cors(corsOptions));
app.get('*.js', (request, response, next) => {
    request.url += '.gz';
    response.set('Content-Encoding', 'gzip');
    next();
});
app.use(bodyParser.json());
app.use(cookieParser());
// Assets
app.use(serveStatic(path.join(__dirname, '../../public')));
app.use('/api', api_1.default);
app.get(/^\/(?!api)/, utils_1.sendIndex);
// Ensure responses is ended
app.use(utils_1.endResponse);
// Errors
app.use(utils_1.errorHandler);
exports.default = app.listen(SERVER_PORT, () => {
    console.log('Listening on port ' + SERVER_PORT + '!');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL21udC9jL1VzZXJzL0plZmYvUGVlci1HZW5pdXMvc2VydmVyL2NvcmUvc2VydmVyLnRzIiwic291cmNlcyI6WyIvbW50L2MvVXNlcnMvSmVmZi9QZWVyLUdlbml1cy9zZXJ2ZXIvY29yZS9zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFDN0IsbUNBQW1DO0FBQ25DLDZCQUE2QjtBQUM3Qiw4Q0FBOEM7QUFDOUMsMENBQTBDO0FBQzFDLDRDQUE0QztBQUU1Qyw0Q0FBNkM7QUFDN0MsZ0RBQW9GO0FBQ3BGLHVDQUFzQztBQUV0QyxNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFJOUMsTUFBTSxXQUFXLEdBQUc7SUFDbkIsTUFBTSxFQUFFLENBQUMsTUFBYyxFQUFFLEVBQWdCO1FBQ3hDLHVCQUF1QjtRQUN2QixpREFBaUQ7UUFDakQsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxLQUFLLHVCQUF1QixDQUFDLENBQUMsQ0FBQztZQUNuRCxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hCLENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDN0IsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoQixDQUFDO1FBQ0QsSUFBSSxDQUFDLENBQUM7WUFDTCxFQUFFLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUNoQyxDQUFDO0lBQ0YsQ0FBQztJQUNELGNBQWMsRUFBRSxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsRUFBRSxjQUFjLEVBQUUsUUFBUSxDQUFDO0lBQ3hFLFdBQVcsRUFBRSxJQUFJO0NBQ2pCLENBQUM7QUFFRixNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUV0QixtQkFBVSxFQUFFLENBQUM7QUFFYixTQUFTO0FBQ1QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFNLENBQUMsQ0FBQztBQUVoQixPQUFPO0FBQ1AsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDcEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUUzQixHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSTtJQUN2QyxPQUFPLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQztJQUNyQixRQUFRLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLElBQUksRUFBRSxDQUFDO0FBQ1IsQ0FBQyxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBRTNCLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztBQUV4QixTQUFTO0FBQ1QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTNELEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLGFBQVMsQ0FBQyxDQUFDO0FBRTNCLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLGlCQUFTLENBQUMsQ0FBQztBQUVqQyw0QkFBNEI7QUFDNUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxtQkFBVyxDQUFDLENBQUM7QUFFckIsU0FBUztBQUNULEdBQUcsQ0FBQyxHQUFHLENBQUMsb0JBQVksQ0FBQyxDQUFDO0FBRXRCLGtCQUFlLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEdBQUcsV0FBVyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZELENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgKiBhcyBjb3JzIGZyb20gJ2NvcnMnO1xuaW1wb3J0ICogYXMgY29va2llUGFyc2VyIGZyb20gJ2Nvb2tpZS1wYXJzZXInO1xuaW1wb3J0ICogYXMgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XG5pbXBvcnQgKiBhcyBzZXJ2ZVN0YXRpYyBmcm9tICdzZXJ2ZS1zdGF0aWMnO1xuXG5pbXBvcnQgeyBpbml0TWFpbGVyIH0gZnJvbSAnLi4vZW1haWwvbWFpbGVyJztcbmltcG9ydCB7IGxvZ2dlciwgc2VuZEluZGV4LCBlbmRSZXNwb25zZSwgZXJyb3JIYW5kbGVyIH0gZnJvbSAnLi4vcm91dGVyL21pc2MvdXRpbHMnO1xuaW1wb3J0IGFwaVJvdXRlciBmcm9tICcuLi9yb3V0ZXIvYXBpJztcblxuY29uc3QgeyBOT0RFX0VOViwgU0VSVkVSX1BPUlQgfSA9IHByb2Nlc3MuZW52O1xuXG50eXBlIENPUlNDYWxsYmFjayA9IChlcnJvcjogYW55LCBhbGxvd2VkPzogYm9vbGVhbikgPT4gdm9pZDtcblxuY29uc3QgY29yc09wdGlvbnMgPSB7XG5cdG9yaWdpbjogKG9yaWdpbjogc3RyaW5nLCBjYjogQ09SU0NhbGxiYWNrKSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2cob3JpZ2luKTtcblx0XHQvLyBJZiBvcmlnaW4gaXMgbnVsbCBvciBwZWVyZ2VuaXVzLmlvLCBpdCdzIGdvb2QuXG5cdFx0aWYgKCFvcmlnaW4gfHwgb3JpZ2luID09PSAnaHR0cHM6Ly9wZWVyZ2VuaXVzLmlvJykge1xuXHRcdFx0Y2IobnVsbCwgdHJ1ZSk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKE5PREVfRU5WID09PSAnZGV2Jykge1xuXHRcdFx0Y2IobnVsbCwgdHJ1ZSk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0Y2IoYFJlcXVlc3QgYmxvY2tlZCBieSBDT1JTLmApO1xuXHRcdH1cblx0fSxcblx0YWxsb3dlZEhlYWRlcnM6IFsnT3JpZ2luJywgJ1gtUmVxdWVzdGVkLVdpdGgnLCAnQ29udGVudC1UeXBlJywgJ0FjY2VwdCddLFxuXHRjcmVkZW50aWFsczogdHJ1ZVxufTtcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG5pbml0TWFpbGVyKCk7XG5cbi8vIExvZ2dlclxuYXBwLnVzZShsb2dnZXIpO1xuXG4vLyBDT1JTXG5hcHAub3B0aW9ucygnKicsIGNvcnMoY29yc09wdGlvbnMpKTtcbmFwcC51c2UoY29ycyhjb3JzT3B0aW9ucykpO1xuXG5hcHAuZ2V0KCcqLmpzJywgKHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0KSA9PiB7XG5cdHJlcXVlc3QudXJsICs9ICcuZ3onO1xuXHRyZXNwb25zZS5zZXQoJ0NvbnRlbnQtRW5jb2RpbmcnLCAnZ3ppcCcpO1xuXHRuZXh0KCk7XG59KTtcblxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5cbmFwcC51c2UoY29va2llUGFyc2VyKCkpO1xuXG4vLyBBc3NldHNcbmFwcC51c2Uoc2VydmVTdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL3B1YmxpYycpKSk7XG5cbmFwcC51c2UoJy9hcGknLCBhcGlSb3V0ZXIpO1xuXG5hcHAuZ2V0KC9eXFwvKD8hYXBpKS8sIHNlbmRJbmRleCk7XG5cbi8vIEVuc3VyZSByZXNwb25zZXMgaXMgZW5kZWRcbmFwcC51c2UoZW5kUmVzcG9uc2UpO1xuXG4vLyBFcnJvcnNcbmFwcC51c2UoZXJyb3JIYW5kbGVyKTtcblxuZXhwb3J0IGRlZmF1bHQgYXBwLmxpc3RlbihTRVJWRVJfUE9SVCwgKCkgPT4ge1xuXHRjb25zb2xlLmxvZygnTGlzdGVuaW5nIG9uIHBvcnQgJyArIFNFUlZFUl9QT1JUICsgJyEnKTtcbn0pO1xuIl19